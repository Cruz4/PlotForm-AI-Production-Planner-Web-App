
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a collaborator on an episode
    function isCollaborator(resourceId) {
      return request.auth != null && get(/databases/$(database)/documents/episodes/$(resourceId)).data.collaborators.hasAny([request.auth.uid]);
    }
    
    // episodes: Users can read if they are in the 'collaborators' array.
    // They can only create/update/delete if they are the original creator.
    match /episodes/{episodeId} {
      allow read: if isCollaborator(episodeId);
      allow create: if isOwner(request.resource.data.createdBy);
      allow update, delete: if isOwner(resource.data.createdBy);
    }
    
    // episodeVersions: Users can only manage versions of episodes they own.
    match /episodeVersions/{versionId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // episodeLayouts: Users can only manage their own layouts.
    match /episodeLayouts/{layoutId} {
      allow read, write: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
    }
    
    // tasks: Users can only manage their own tasks.
    match /tasks/{taskId} {
      allow read, write: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
    }

    // userPreferences: Users can only manage their own preferences.
    match /userPreferences/{userId} {
      allow read, write: if isOwner(userId);
    }

    // usersettings: Users can only manage their own settings.
    match /usersettings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // userCustomThemes: Users can only manage their own custom themes.
    match /userCustomThemes/{themeId} {
      allow read, write: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
    }
    
    // userWorkspaces: Users can only manage their own workspaces.
    match /userWorkspaces/{workspaceId} {
      allow read, write: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
    }
    
    // plannerPals: Users can interact with requests where they are involved.
    match /plannerPals/{palId} {
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.userIds;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requestedBy;
    }
    
    // publicActivities: Logged-in users can read, but only owners can create/delete.
    match /publicActivities/{activityId} {
      allow read: if request.auth != null;
      allow create, delete: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
    }
    
    // shares: Users can manage shares sent to/from them.
    match /shares/{shareId} {
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.toUserId || request.auth.uid == resource.data.fromUserId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
    }

    // sharedSeasons: NEW - Allow authenticated users to read and create.
    match /sharedSeasons/{shareId} {
        allow read, create: if request.auth != null;
        // No update/delete from client side for security
    }

    // users: Public read, but only the user can create/update their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if isOwner(userId);
    }
  }
}
